{"version":3,"sources":["components/Navbar.js","components/Converter.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","name","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","class","onClick","styling","htmlFor","myText","Converter","_useState","useState","_useState2","Object","slicedToArray","text","setText","heading","value","onChange","event","target","rows","style","backgroundColor","color","disabled","length","ch","toUpperCase","toLowerCase","cpy","document","getElementById","select","navigator","clipboard","writeText","showAlert","val","split","join","Alert","height","alert","typ","role","msg","App","col","_useState3","_useState4","setMode","_useState5","_useState6","setMyText","_useState7","_useState8","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"mMAGe,SAASA,EAAOC,GAC7B,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAS,0CAAAC,OAA6CL,EAAMM,OAC/DL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAEbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeG,KAAK,KAAKP,EAAMQ,MAC5CP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBK,KAAK,SAASC,iBAAe,WAAWC,iBAAe,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBAC1Lb,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAElBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BW,GAAG,0BAC3Cd,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mCACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAEZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBY,eAAa,OAAOT,KAAK,KAAxD,SAEFN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAEZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAoBG,KAAK,KAAtC,cAGJN,EAAAC,EAAAC,cAAA,OAAKc,MAAM,qCACThB,EAAAC,EAAAC,cAAA,SAAOC,UAAS,uBAAAC,OAAyBL,EAAMM,MAAQY,QAASlB,EAAMmB,QAASV,KAAK,WAAWM,GAAG,2BAClGd,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmBgB,QAAQ,0BAA0BpB,EAAMqB,aCxB3E,SAASC,EAAUtB,GAAO,IAAAuB,EACbC,mBAAS,IADIC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC9BK,EAD8BH,EAAA,GACxBI,EADwBJ,EAAA,GAqCrC,OACIxB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,IAAuBJ,EAAM8B,SAC7B7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAAe2B,MAAOH,EAAMI,SAvC3C,SAACC,GACdJ,EAAQI,EAAMC,OAAOH,QAsCuDhB,GAAG,8BAA8BoB,KAAK,IAAIC,MAAO,CAAEC,gBAAgC,SAAfrC,EAAMM,KAAkB,UAAY,QAASgC,MAAsB,SAAftC,EAAMM,KAAkB,QAAU,YAElOL,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAAS8B,SAA0B,IAAhBX,EAAKY,OAAcpC,UAAS,WAAAC,OAAaL,EAAMM,KAAnB,cAAqCY,QArCvF,WACd,IAAIuB,EAAKb,EAAKc,cACdb,EAAQY,KAmCJ,aACAxC,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAAS8B,SAA0B,IAAhBX,EAAKY,OAAcpC,UAAS,WAAAC,OAAaL,EAAMM,KAAnB,cAAqCY,QAjCtF,WACf,IAAIuB,EAAKb,EAAKe,cACdd,EAAQY,KA+BJ,aACAxC,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAAS8B,SAA0B,IAAhBX,EAAKY,OAAcpC,UAAS,WAAAC,OAAaL,EAAMM,KAAnB,cAAqCY,QA7BpF,WACjBW,EAAQ,MA4BJ,cACA5B,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAAS8B,SAA0B,IAAhBX,EAAKY,OAAcpC,UAAS,WAAAC,OAAaL,EAAMM,KAAnB,cAAqCY,QA1BrF,WAChB,IAAI0B,EAAMC,SAASC,eAAe,+BAClCF,EAAIG,SACJC,UAAUC,UAAUC,UAAUN,EAAIb,OAC/BH,EAAKY,OAAS,EACbxC,EAAMmD,UAAU,+BAAgC,WAGhDnD,EAAMmD,UAAU,mBAAoB,aAkBpC,qBACAlD,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAAS8B,SAA0B,IAAhBX,EAAKY,OAAepC,UAAS,WAAAC,OAAaL,EAAMM,KAAnB,cAAqCY,QAfxF,WACd,IAAIkC,EAAMxB,EAAKyB,MAAM,QACrBxB,EAAQuB,EAAIE,KAAK,QAab,iBAEArD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,gBACAH,EAAAC,EAAAC,cAAA,SAAa,KAATyB,EAAY,EAA6B,MAA1BA,EAAKA,EAAKY,OAAS,GAAYZ,EAAKyB,MAAM,KAAKb,OAAQ,EAAGZ,EAAKyB,MAAM,KAAMb,OAA9F,cAA4I,MAA1BZ,EAAKA,EAAKY,OAAS,GAAaZ,EAAKY,OAAS,EAAKZ,EAAKY,OAA1K,eACAvC,EAAAC,EAAAC,cAAA,aAAIF,EAAAC,EAAAC,cAAA,cAAkB,KAATyB,EAAY,EAA6B,MAA1BA,EAAKA,EAAKY,OAAS,GAAwC,MAA3BZ,EAAKyB,MAAM,KAAKb,OAAQ,GAAoC,KAAzBZ,EAAKyB,MAAM,KAAMb,OAA5G,aAAJ,kBACAvC,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACXH,EAAAC,EAAAC,cAAA,SAAIyB,EAAKY,OAAS,EAAIZ,EAAO,2DCtD9B,SAAS2B,EAAMvD,GAC1B,OACIC,EAAAC,EAAAC,cAAA,OAAKiC,MAAO,CAAEoB,OAAQ,SACjBxD,EAAMyD,OAASxD,EAAAC,EAAAC,cAAA,OAAKC,UAAS,eAAAC,OAAiBL,EAAMyD,MAAMC,IAA7B,gCAAgEC,KAAK,SAC/F1D,EAAAC,EAAAC,cAAA,cAASH,EAAMyD,MAAMG,OC8DtBC,MAxDf,WAAe,IAAAtC,EAESC,mBAAS,QAFlBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAENuC,EAFMrC,EAAA,GAAAsC,GAAAtC,EAAA,GAGWD,mBAAS,YAHpBwC,EAAAtC,OAAAC,EAAA,EAAAD,CAAAqC,EAAA,GAGNzD,EAHM0D,EAAA,GAGAC,EAHAD,EAAA,GAAAE,EAIe1C,mBAAS,oBAJxB2C,EAAAzC,OAAAC,EAAA,EAAAD,CAAAwC,EAAA,GAIN7C,EAJM8C,EAAA,GAIEC,EAJFD,EAAA,GAAAE,EAKa7C,mBAAS,MALtB8C,EAAA5C,OAAAC,EAAA,EAAAD,CAAA2C,EAAA,GAKNZ,EALMa,EAAA,GAKCC,EALDD,EAAA,GAwBPnB,EAAY,SAACqB,EAAS/D,GAC1B8D,EAAS,CACPX,IAAKY,EACLd,IAAKjD,IAEPgE,WAAW,WACTF,EAAS,OACR,MAGL,OACEtE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAWbH,EAAAC,EAAAC,cAACJ,EAAD,CAAQS,KAAK,YAAYF,KAAMA,EAAMa,QAvCzB,WACD,YAATb,GACF2D,EAAQ,QACRG,EAAU,qBACVvB,SAAS6B,KAAKtC,MAAMC,gBAAkB,UACtCQ,SAAS6B,KAAKtC,MAAME,MAAQ,QAC5Ba,EAAU,+BAAgC,aAG1Cc,EAAQ,WACRG,EAAU,oBACVvB,SAAS6B,KAAKtC,MAAMC,gBAAkB,QACtCQ,SAAS6B,KAAKtC,MAAME,MAAQ,QAC5Ba,EAAU,gCAAiC,aA0BY9B,OAAQA,EAAQyC,IAAKA,IAC5E7D,EAAAC,EAAAC,cAACoD,EAAD,CAAOE,MAAOA,IACdxD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACmB,EAAD,CAAWQ,QAAQ,0DAA0DxB,KAAMA,EAAM6C,UAAWA,OCjD7FwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAW5C,SAASC,eAAe,SACpD4C,OACHzF,EAAAC,EAAAC,cAACF,EAAAC,EAAMyF,WAAP,KACE1F,EAAAC,EAAAC,cAACyF,EAAD,QAOJjB","file":"static/js/main.bc0490a7.chunk.js","sourcesContent":["import React from 'react'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav className= {`navbar navbar-expand-lg navbar-dark bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          {/* <Link className=\"navbar-brand\" to=\"/\">{props.name}</Link> */}\r\n          <a className=\"navbar-brand\" href=\"#\">{props.name}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link\" to=\"/about\">About Us</Link> */}\r\n                <a className=\"nav-link disabled\" href=\"#\">About Us</a>\r\n              </li>\r\n            </ul>\r\n            <div class=\"form-check form-switch text-light\">\r\n              <input className={`form-check-input bg-${props.mode}`} onClick={props.styling} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.myText}</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function Converter(props) {\r\n    const [text, setText] = useState(\"\");\r\n    const changeIt = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const clickUpIt = () => {\r\n        let ch = text.toUpperCase();\r\n        setText(ch);\r\n    }\r\n\r\n    const clickLowIt = () => {\r\n        let ch = text.toLowerCase();\r\n        setText(ch);\r\n    }\r\n\r\n    const clickClearIt = () => {\r\n        setText(\"\");\r\n    }\r\n\r\n    const clickCopyIt = () => {\r\n        let cpy = document.getElementById(\"exampleFormControlTextarea1\");\r\n        cpy.select();\r\n        navigator.clipboard.writeText(cpy.value);\r\n        if(text.length > 0){\r\n            props.showAlert(\"Text is copied to clipboard!\", \"success\");\r\n        }\r\n        else{\r\n            props.showAlert(\"Nothing to copy!\", \"warning\");\r\n        }\r\n    }\r\n\r\n    const clickTrimIt=() =>{\r\n        let val = text.split(/[ ]+/);\r\n        setText(val.join(\" \"));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3 className='mt-5'> {props.heading}</h3>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} onChange={changeIt} id=\"exampleFormControlTextarea1\" rows=\"7\" style={{ backgroundColor: props.mode === \"dark\" ? \"#212529\" : \"white\", color: props.mode === \"dark\" ? \"white\" : \"black\" }}></textarea>\r\n            </div>\r\n            <button type=\"button\" disabled={text.length === 0} className={`btn btn-${props.mode} me-2 mt-2`} onClick={clickUpIt}>UpperCase</button>\r\n            <button type=\"button\" disabled={text.length === 0} className={`btn btn-${props.mode} me-2 mt-2`} onClick={clickLowIt}>LowerCase</button>\r\n            <button type=\"button\" disabled={text.length === 0} className={`btn btn-${props.mode} me-2 mt-2`} onClick={clickClearIt}>Clear Text</button>\r\n            <button type=\"button\" disabled={text.length === 0} className={`btn btn-${props.mode} me-2 mt-2`} onClick={clickCopyIt}>Copy To Clipboard</button>\r\n            <button type=\"button\" disabled={text.length === 0}  className={`btn btn-${props.mode} me-2 mt-2`} onClick={clickTrimIt}>Remove Spaces</button>\r\n\r\n            <h2 className='mt-3'>Text Summary</h2>\r\n            <p>{text === \"\"?0:(text[text.length - 1] === ' '?(text.split(\" \").length)-1:(text.split(\" \")).length)} words and {text[text.length - 1] === ' '? (text.length - 1) : text.length} characters</p>\r\n            <p>[<strong>{text === \"\"?0:(text[text.length - 1] === ' '?((text.split(\" \").length)-1)*0.008:((text.split(\" \")).length)*0.008)} minutes </strong>taken to read]</p>\r\n            <h2>Text Preview</h2>\r\n            <div className=\"container-fluid border border-2\">\r\n                <p>{text.length > 0 ? text : \"Write something in the above textbox to view here !!!\"}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        <div style={{ height: '30px' }}>\r\n            {props.alert && <div className={`alert alert-${props.alert.typ} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{props.alert.msg}</strong>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport Converter from './components/Converter';\n// import About from './components/About';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter,\n//   Routes,\n//   Route,\n// } from \"react-router-dom\";\n\nfunction App() {\n  // eslint-disable-next-line\n  const [col, setCol] = useState(\"dark\");\n  const [mode, setMode] = useState(\"primary\");\n  const [myText, setMyText] = useState(\"Enable Dark Mode\");\n  const [alert, setAlert] = useState(null);\n\n  const styleIt = () => {\n    if (mode === \"primary\") {\n      setMode(\"dark\");\n      setMyText(\"Enable Light Mode\");\n      document.body.style.backgroundColor = '#091a32';\n      document.body.style.color = 'white';\n      showAlert(\"Dark mode has been enabeled!\", \"success\");\n    }\n    else {\n      setMode(\"primary\");\n      setMyText(\"Enable Dark Mode\");\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'black';\n      showAlert(\"Light mode has been enabeled!\", \"success\");\n    }\n  }\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      typ: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 3000);\n  }\n\n  return (\n    <div className=\"App\">\n      {/* <BrowserRouter>\n        <Navbar name=\"TextUtils\" mode={mode} styling={styleIt} myText={myText} col={col}></Navbar>\n        <Alert alert={alert}></Alert>\n        <div className=\"container my-3\">\n          <Routes>\n            <Route exact path='/' element={<Converter heading=\"Write a text here to convert it in UPPERCASE/lowercase:\" mode={mode} showAlert={showAlert} />}></Route>\n            <Route exact path='/about' element={< About mode={mode} />}></Route>\n          </Routes>\n        </div>\n      </BrowserRouter> */}\n      <Navbar name=\"TextUtils\" mode={mode} styling={styleIt} myText={myText} col={col}></Navbar>\n      <Alert alert={alert}></Alert>\n      <div className=\"container\">\n        <Converter heading=\"Write a text here to convert it in UPPERCASE/lowercase:\" mode={mode} showAlert={showAlert} />\n      </div>\n      {/* < About mode={mode} /> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}